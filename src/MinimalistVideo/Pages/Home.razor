@page "/"
@implements IDisposable
@using Microsoft.AspNetCore.Http
@using MinimalistVideo.Components
@using OneOf
@using OneOf.Types
@inject PersistentComponentState ApplicationState

<MudContainer Fixed="true" MaxWidth="MaxWidth.Medium">
    <Loader Loaded="@_pageLoaded">
        @if (ValidVimeo)
        {
            var vimeo = new Vimeo(Vimeo!, VimeoHash.ToOption());

            <VimeoVideo Video="vimeo" Start="StartTime"/>  
        }
        <MudStack Style="width:100%; height:100%; position:relative;">
            <MudStack Row="true">
                <MudSpacer />
                <MudCard>
                    @if (ValidYouTube)
                    {
                        var videoParameters = new QueryString();

                        // clip
                        if (!string.IsNullOrWhiteSpace(ClipId) && !string.IsNullOrWhiteSpace(ClipTimestamp))
                        {
                            videoParameters = videoParameters.Add("clip", ClipId).Add("clipt", ClipTimestamp);

                        }
                        
                        // start
                        if (StartTime.TryPickT0(out var startTime, out _))
                        {
                            videoParameters = videoParameters.Add("start", ((int)startTime.TotalSeconds).ToString());
                        }
                        
                        <iframe src="@($"https://www.youtube.com/embed/{YouTube}{videoParameters.ToString()}")"
                        width="560"
                        height="315"
                        title="YouTube video player"
                        frameborder="0"
                        allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen>
                        </iframe>
                    }

                    @if (ValidTikTok)
                    {
                        <blockquote class="tiktok-embed" cite="https://www.tiktok.com/@@@(TikTokUserHandle)/video/@TikTok" data-video-id="@TikTok" style="max-width: 605px;min-width: 325px;">
                            <section />
                        </blockquote>
                        <script async src="https://www.tiktok.com/embed.js"></script>
                    }

                    @if (ValidWistia)
                    {
                        <iframe src="//fast.wistia.net/embed/iframe/@Wistia?videoFoam=true" allowtransparency="true" frameborder="0"
                        scrolling="no" class="wistia_embed" name="wistia_embed" allowfullscreen mozallowfullscreen
                        webkitallowfullscreen oallowfullscreen msallowfullscreen width="1000" height="563"></iframe>
                        <script src="//fast.wistia.net/assets/external/iframe-api-v1.js"></script>
                        <script charset="ISO-8859-1" src="//fast.wistia.com/assets/external/E-v1.js"></script>
                    }

                    @if (!(ValidYouTube || ValidVimeo || ValidTikTok || ValidWistia))
                    {
                        <MudText Align="Align.Center">Video Failed to Load</MudText>
                    }
                </MudCard>
                <MudSpacer />
            </MudStack>
            <MudSpacer />
        </MudStack>
    </Loader>
</MudContainer>

@code {
    private bool _pageLoaded = false;
    private PersistingComponentStateSubscription _persistingSubscription;
    private OneOf<PrerenderedState, None> _prerenderedState = new None();

    [SupplyParameterFromQuery(Name = "y")]
    public string? YouTube { get; set; }

    [SupplyParameterFromQuery(Name = "v")]
    public string? Vimeo { get; set; }

    /// <summary>
    ///     Required for private Vimeo videos. See https://www.drupal.org/project/video_embed_field/issues/3238136
    /// </summary>
    [SupplyParameterFromQuery(Name = "h")]
    public string? VimeoHash { get; set; }

    [SupplyParameterFromQuery(Name = "t")]
    public string? TikTok { get; set; }

    [SupplyParameterFromQuery(Name = "th")]
    public string? TikTokUserHandle { get; set; }

    [SupplyParameterFromQuery(Name = "w")]
    public string? Wistia { get; set; }

    [SupplyParameterFromQuery(Name = "s")]
    private string? Start { get; set; }

    [SupplyParameterFromQuery(Name = "clip")]
    private string? ClipId { get; set; }
    
    [SupplyParameterFromQuery(Name = "clipt")]
    private string? ClipTimestamp { get; set; }
    
    private OneOf<TimeSpan, None> StartTime => int.TryParse(Start, out var parsedStart) ? TimeSpan.FromSeconds(parsedStart) : new None();

    private bool ValidYouTube => !string.IsNullOrWhiteSpace(YouTube);
    private bool ValidVimeo => !string.IsNullOrWhiteSpace(Vimeo);
    private bool ValidTikTok => !string.IsNullOrWhiteSpace(TikTok) && !string.IsNullOrWhiteSpace(TikTokUserHandle);
    private bool ValidWistia => !string.IsNullOrWhiteSpace(Wistia);

    protected override void OnAfterRender(bool firstRender)
    {
        // remove placeholder UI 
        if(!_pageLoaded)
        {
            if ((_prerenderedState.IsT1 && firstRender) || (_prerenderedState.IsT0))
            {
                this.InvokeAsync(() =>
                      {
                          _pageLoaded = true;

                          this.StateHasChanged();
                      });
            }
        }     
    }

    protected override void OnInitialized()
    {
        _persistingSubscription = ApplicationState.RegisterOnPersisting(PersistComponentStateAsync);

        if (!ApplicationState.TryTakeFromJson<PrerenderedState>("fetchdata", out var restored))
        {
            _prerenderedState = new None();
        }
        else
        {
            _prerenderedState = restored!;
        }
    }

    private Task PersistComponentStateAsync()
    {
        ApplicationState.PersistAsJson("fetchdata", new PrerenderedState());

        return Task.CompletedTask;
    }

    void IDisposable.Dispose()
    {
        _persistingSubscription.Dispose();
    }

    private class PrerenderedState;
}